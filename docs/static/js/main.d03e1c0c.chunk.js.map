{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","onChange","target","value","GifGridItem","id","title","url","key","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,qBADY,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,0BAAMC,SATe,SAAAC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,SAdQ,SAAAN,GAC7BF,EAAcE,EAAEO,OAAOC,YCLdC,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,yBAAKC,IAAKH,EAAII,UAAU,0CACtB,wBAAIA,UAAU,iBAAiBH,GAC/B,yBAAKI,IAAKH,EAAKI,IAAKL,EAAOG,UAAU,mB,uBCN9BG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfP,EADe,iDACiCQ,UACpDF,GAFmB,+DAIFG,MAAMT,GAJJ,cAIfU,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLjB,GAAIiB,EAAIjB,GACRC,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAXjB,kBAcda,GAdc,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAAAA,GAAa,IAAD,EACZtB,mBAAS,CACjC4B,KAAM,GACNO,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KAatC,OARAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAAAC,GACrBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACb,IACGc,EDX2BK,CAAanB,GAAjCU,EADyB,EAC/BJ,KAAcO,EADiB,EACjBA,QAEtB,OACE,yBAAKjB,UAAU,aACb,wBAAIA,UAAU,0CAA0CI,GACvDa,GACC,uBAAGjB,UAAU,yCAAb,YAEDc,EAAOF,KAAI,SAAAC,GAAG,OACb,kBAAC,EAAD,eAAad,IAAKc,EAAIjB,IAAQiB,SEVzBW,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,cADd,mBACzB2C,EADyB,KACb5C,EADa,KAGhC,OACE,6BACE,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BACG4C,EAAWb,KAAI,SAAAR,GAAQ,OACtB,kBAAC,EAAD,CAASL,IAAKK,EAAUA,SAAUA,UCP5CsB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.d03e1c0c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport propTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState();\n\n  const handleChangeInputValue = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleOnSubmit}>\n      <input type=\"text\" onChange={handleChangeInputValue} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: propTypes.func.isRequired\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div key={id} className=\"card animate__animated animate__fadeIn\">\n      <li className=\"titleGridItem\">{title}</li>\n      <img src={url} alt={title} className=\"imgGridItem \" />\n    </div>\n  );\n};\n","export const getGifs = async category => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=vWAgxWH7ZvFIiFhDEM2YvSFR9rRXCINm`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <div className=\"card-grid\">\n      <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\n      {loading && (\n        <p className=\"card animate__animated animate__flash\">cargando</p>\n      )}\n      {images.map(img => (\n        <GifGridItem key={img.id} {...img} />\n      ))}\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = category => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true\n  });\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setstate({\n        data: imgs,\n        loading: false\n      });\n    });\n  }, [category]);\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  return (\n    <div>\n      <AddCategory setCategories={setCategories} />\n      <ol>\n        {categories.map(category => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}